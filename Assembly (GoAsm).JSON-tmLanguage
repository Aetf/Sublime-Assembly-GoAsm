// [PackageDev] target_format: plist, ext: tmLanguage
{
	"name": "Assembly (GoASM)",
	"scopeName": "source.asm",
	"fileTypes": [
		"asm", "ASM", "inc", "INC"
	],
	"uuid": "76d94322-7c7b-4ae0-8abf-09183b340bc7",

	"patterns": [

		{
            "name": "comment.line",

            "match": "(;|//).*$"
        },
        {
            "name": "comment.block",
            "begin": "/\\*",
            "end": "\\*/"
        }, 

		// Constants
		{
            "name": "constant.numeric.dec",
            "comment": "Decimal numbers",

            "match": "\\b(\\d+(d|D)?)\\b",
            "captures": {
                "1": {
                    "name": "constant.numeric.dec"
                }
            }
        },
        {
            "name": "constant.numeric.hex",
            "comment": "Hexadecimal numbers format: FFh",

            "match": "\\b([0-9][0-9a-fA-F]*(h|H))\\b",
            "captures": {
                "1": {
                    "name": "constant.numeric.hex"
                }
            }
        },
        {
            "name": "constant.numeric.hex",
            "comment": "Hexadecimal numbers format: FFh",

            "match": "\\b(0x[0-9a-fA-F]+)\\b",
            "captures": {
                "1": {
                    "name": "constant.numeric.hex"
                }
            }
        },
        {
            "name": "constant.numeric.bin", 
            "comment": "Binary numbers format: 100101b",

            "match": "\\b([0-1]+(b|B))\\b", 
            "captures": {
                "1": {
                    "name": "constant.numeric.bin"
                }
            }
        },
        {
            "name": "constant.numeric.oct", 
            "comment": "Octal numbers format: 76543210o",

            "match": "\\b([0-7]+(o|O))\\b", 
            "captures": {
                "1": {
                    "name": "constant.numeric.oct"
                }
            }
        },
        {
        	"name": "constant.numeric.real",
        	"comment": "Real numbers format: 1.6789E-2",

        	"match": "\\b(\\d+(\\.\\d+)((e|E)-?\\d+)?)\\b",
        	"captures": {
        	    "1": {
        	    	"name": "constant.numeric.real"
        	    }
        	}
        },
        {
            "name": "string.quoted.single", 
            "comment": "String caracter", 

            "match": "(?<!\\$)(L|A|8)?'(.*)'(?!\\$)", 
            "captures": {
                "1": {
                    "name": "string.quoted"
                }
            }
        },
        {
            "name": "string.quoted.double", 
            "comment": "String caracter", 

            "match": "(?<!\\$)(L|A|8)?\"(.*)\"(?!\\$)", 
            "captures": {
                "1": {
                    "name": "string.quoted"
                }
            }
        },


        // Labels
        /*
        {
            "name": "entity.name.tag.reusable.scoped",

            "match": "(\\.\\w+[:]?)"
        },
        {
            "name": "entity.name.tag.reusable.unscoped",

            "match": "([a-zA-Z]?\\d+:)"
        },
        {
            "name": "entity.name.tag.unique",
            
            "match": "^\\s*([a-zA-Z_]+[:]?)",

            "captures": {
                "1": {
                    "name": "entity.name.tag.unique"
                }
            }
        },
        */

        // Operators
        {
        	"name": "keyword.operator",

        	"match": "\\b(?i:ADDR|OFFSET|SIZEOF|OR|AND|NOT)\\b"
        },
        {
        	"name": "keyword.operator",

        	"match": "\\+|-|\\*|/|\\(|\\)|&|\\||!|<<|>>|~"
        },
        {
            "name": "markup.italic.address-deref",
            "comment": "Assembly address dereference",

            "begin": "\\[",

            "end": "\\]",

            "patterns": [
                {"include": "$self"}
            ]
        },


        // GoAsm specific
        // - directives
        {
        	"name": "keyword.other.directive",

        	"match": "\\b(?i:INVOKE|ARG|PUSHW|POPW)\\b"
        },
		// - declaration directives
		{
            "name": "keyword.other.directive.declaration.segment",
            "comment": "Segment declaration",

            "match": "\\b(?i:\\.?CODE|\\.?CONST|\\.?DATA|CODE SECTION|DATA SECTION|CONST SECTION|CONSTANT SECTION)\\b"
        },
        {
        	"name": "keyword.other.directive.declaration.datablock",
        	"comment": "start and end large data blocks",

        	"match": "\\b(?i:DATABLOCK_BEGIN|DATABLOCK_END)\\b"
        },
        {
            "name": "storage.type",
            "match": "\\b(?i:BYTE|WORD|DWORD|QWORD|TBYTE|OWORD|DB|DW|DD|DQ|DT|DUS)\\b"
        },
        {
        	"name": "keyword.control",

        	"match": "\\b(?i:DUP)\\b"
        },
        // - struct declaration
        {
        	"name": "entity.other.struct",

        	"begin": "^(\\w+)\\b(?i:STRUCT)",
        	"beginCaptures":{
        		"1": {"name": "entity.name.struct"}
        	},

        	"end": "\\b(?i:ENDS)\\b",

            "patterns": [
                { "include": "$self" }
            ]
        },
        // - union declaration
        {
        	"name": "entity.other.union",

        	"begin": "^(\\w+)\\b(?i:UNION)",
        	"beginCaptures":{
        		"1": {"name": "entity.name.union"}
        	},

        	"end": "\\b(?i:ENDS|ENDUNION)\\b",

            "patterns": [
                { "include": "$self" }
            ]
        },
        // - modifiers
        {
        	"name": "keyword.other.modifier",

        	"match": "\\b(?i:LONG)\\b"
        },
        {
        	"name": "keyword.other.modifier.direction_indicator",

        	"match": "\\b(<|>|<<|>>)\\b"
        },
        {
        	"name": "keyword.other.modifier.type_indicator",

        	"match": "\\b(B|W|D|Q|T|S|P)(?=\\[)"
        },
        // - macros, equate, etc.
        {
        	"name": "keyword.other.directive.definition",

        	"match": "(?i:EQU|=)"
        },
        {
        	"name": "entity.other.macro",

        	"begin": "^(\\w+)\\b(?i:MACRO)",
        	"beginCaptures":{
        		"1": {"name": "entity.name.macro"}
        	},

        	"end": "\\b(?i:ENDM)\\b",

            "patterns": [
                { "include": "$self" }
            ]
        },
        // - preprocessor directives
        {
        	"name": "keyword.other.preprocessor",

        	"match": "^#(?i:define|if|elif|else|endif|ifdef|ifndef|include)\\b"
        },
        // - others
        {
        	"name": "keyword.other.pi",

        	"match": "\\b(?i:PI)\\b"
        },
        {
        	"name": "keyword.other.directive",

        	"match": "\\b(?i:INCBIN)\\b"
        },
        {
        	"name": "keyword.other.source_info",

        	"match": "\\b@(line|filename|filecur)\\b"
        },
        {
        	"name": "keyword.other.hint",

        	"match": "\\bhint\\.(nobranch|branch)\\b"
        },


        // "Standard" directives
        {
            "match": "^\\s*(?i:aesenc|aesenclast|aesdec|aesdeclast|aeskeygenassist|aesimc)\\s", 
            "name": "support.class.aes", 
            "comment": "Function SSE4 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.aes"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:vfmaddpd|vfmaddps|vfmaddsd|vfmaddss|vfmaddsubpd|vfmaddsubps|vfmsubaddpd|vfmsubaddps|vfmsubpd|vfmsubps|vfmsubsd|vfmsubss|vfnmaddpd|vfnmaddps|vfnmaddsd|vfnmaddss|vfnmsubpd|vfnmsubps|vfnmsubsd|vfnmsubss)\\s", 
            "name": "support.class.avx-fma", 
            "comment": "Function Intel AVX FMA case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.avx-fma"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:mpsadbw|phminposuw|pmulld|pmuldq|dpps|dppd|blendps|blendpd|blendvps|blendvpd|pblendvb|pblendw|pminsb|pmaxsb|pminuw|pmaxuw|pminud|pmaxud|pminsd|pmaxsd|roundps|roundss|roundpd|roundsd|insertps|pinsrb|pinsrd|pinsrq|extractps|pextrb|pextrw|pextrd|pextrq|pmovsxbw|pmovzxbw|pmovsxbd|pmovzxbd|pmovsxbq|pmovzxbq|pmovsxwd|pmovzxwd|pmovsxwq|pmovzxwq|pmovsxdq|pmovzxdq|ptest|pcmpeqq|packusdw|movntdqa|lzcnt|popcnt|extrq|insertq|movntsd|movntss|crc32|pcmpestri|pcmpestrm|pcmpistri|pcmpistrm|pcmpgtq)\\s", 
            "name": "support.class.sse4", 
            "comment": "Function SSE4 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse4"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:addsubpd|addsubps|haddpd|haddps|hsubpd|hsubps|movddup|movshdup|movsldup|psignw|psignd|psignb|pshufb|pmulhrsw|pmaddubsw|phsubw|phsubsw|phsubd|phaddw|phaddsw|phaddd|palignr|pabsw|pabsd|pabsb)\\s", 
            "name": "support.class.sse3", 
            "comment": "Function SSE3 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse3"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:clflush|lfence|maskmovdqu|mfence|movntdq|movnti|movntpd|pause|addpd|addsd|andnpd|andpd|cmppd|cmpsd|comisd|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2pi|cvtpd2ps|cvtpi2pd|cvtps2dq|cvtps2pd|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtss2sd|cvttpd2dq|cvttpd2pi|cvttps2dq|cvttsd2si|divpd|divsd|maxpd|maxsd|minpd|minsd|movapd|movhpd|movlpd|movmskpd|movsd|movupd|mulpd|mulsd|orpd|shufpd|sqrtpd|sqrtsd|subpd|subsd|ucomisd|unpckhpd|unpcklpd|xorpd|movdq2q|movdqa|movdqu|movq2dq|paddq|psubq|pmuludq|pshufhw|pshuflw|pshufd|pslldq|psrldq|punpckhqdq|punpcklqdq)\\s", 
            "name": "support.class.sse2", 
            "comment": "Function SSE2 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse2"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:andnps|andps|orps|pavgb|pavgw|pextrw|pinsrw|pmaxsw|pmaxub|pminsw|pminub|pmovmskb|pmulhuw|psadbw|pshufw|xorps|maskmovq|psadbw|pmaxsw|pminsw|movntq|pmulhuw|pavgw|pavgb|pmaxub|pminub|pmovmskb|shufps|pextrw|pinsrw|cmpss|cmpps|sfence|stmxcsr|ldmxcsr|pshufw|maxss|maxps|divss|divps|minss|minps|subss|subps|mulss|mulps|addss|addps|xorps|orps|andnps|andps|rcpss|rcpps|rsqrtss|rsqrtp|sqrtss|sqrtps|comiss|ucomiss|cvtss2si|cvtps2pi|cvttss2si|cvttps2pi|movntps|cvtsi2ss|cvtpi2ps|movaps|movaps|prefetch2|prefetch1|prefetch0|prefetchnta|movhps|movlhps|movhps|unpckhps|unpcklps|movlps|movhlps|movlps|movss|movups|movss|movups)\\s", 
            "name": "support.class.sse.int", 
            "comment": "Function SSE case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse.int"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:addps|addss|cmpps|cmpss|comiss|cvtpi2ps|cvtps2pi|cvtsi2ss|cvtss2si|cvttps2pi|cvttss2si|divps|divss|ldmxcsr|maxps|maxss|minps|minss|movaps|movhlps|movhps|movlhps|movlps|movmskps|movntps|movss|movups|mulps|mulss|rcpps|rcpss|rsqrtps|rsqrtss|shufps|sqrtps|sqrtss|stmxcsr|subps|subss|ucomiss|unpckhps|unpcklps)\\s", 
            "name": "support.class.sse.simd.float", 
            "comment": "Function SSE case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse.float"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:maskmovq|movntps|movntq|prefetch0|prefetch1|prefetch2|prefetchnta|sfence|fxrstor|fxsave)\\s", 
            "name": "support.class.sse", 
            "comment": "Function SSE case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.sse"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:movsxd|cdqe|cqo|movsq|cmpsq|scasq|lodsq|stosq|pushfq|popfq|jrcxz|cmpxchg16b)\\s", 
            "name": "support.class.x64", 
            "comment": "Function x64 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.x64"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:cmova|cmovae|cmovb|cmovbe|cmovc|cmove|cmovg|cmovge|cmovl|cmovle|cmovna|cmovnae|cmovnb|cmovnbe|cmovnc|cmovne|cmovng|cmovnge|cmovnl|cmovnle|cmovno|cmovnp|cmovns|cmovnz|cmovo|cmovp|cmovpe|cmovpo|cmovs|cmovz|sysenter|sysexit|ud2|fcmov|fcmovb|fcmovbe|fcmove|fcmovnb|fcmovnbe|fcmovne|fcmovnu|fcmovu|fcomi|fcomip|fucomi|fucomip)\\s", 
            "name": "support.class.pentiumpro", 
            "comment": "Function Pentium Pro case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.pentiumpro"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:syscall|sysret|femms|pavgusb|pf2id|pfacc|pfadd|pfcmpeq|pfcmpge|pfcmpgt|pfmax|pfmin|pfmul|pfrcp|pfrcpit1|pfrcpit2|pfrsqit1|pfrsqrt|pfsub|pfsubr|pi2fd|pmulhrw|prefetch|prefetchw|pf2iw|pfnacc|pfpnacc|pi2fw|pswapd)\\s", 
            "name": "support.class.3dnow!", 
            "comment": "Function Pentium case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.3dnow!"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:rdpmc|emms|movd|movq|packssdw|packsswb|packuswb|paddb|paddd|paddsb|paddsw|paddusb|paddusw|paddw|pand|pandn|pcmpeqb|pcmpeqd|pcmpeqw|pcmpgtb|pcmpgtd|pcmpgtw|pmaddwd|pmulhw|pmullw|por|pslld|psllq|psllw|psrad|psraw|psrld|psrlq|psrlw|psubb|psubd|psubsb|psubsw|psubusb|psubusw|psubw|punpckhbw|punpckhdq|punpckhwd|punpcklbw|punpckldq|punpcklwd|pxor|paveb|paddsiw|pmagw|pdistib|psubsiw|pmvzb|pmulhrw|pmvnzb|pmvlzb|pmvgezb|pmulhriw|pmachriw)\\s", 
            "name": "support.class.mmx", 
            "comment": "Function Pentium MMX case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.mmx"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:cpuid|cmpxchg8b|rdmsr|rdtsc|wrmsr|rsm)\\s", 
            "name": "support.class.pentium", 
            "comment": "Function Pentium case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.pentium"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:bswap|cmpxchg|invd|invlpg|wbinvd|xadd)\\s", 
            "name": "support.class.80486", 
            "comment": "Function 80486 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.80486"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:bsf|bsr|bt|btc|btr|bts|cdq|cmpsd|cwde|insb|insw|insd|iret|iretd|jcxz|jecxz|lsf|lgs|lss|lodsd|loopw|loopd|loopew|looped|loopzw|loopzd|loopnew|loopned|loopnzw|loopnzd|movsw|movsd|movsx|movzx|popad|popfd|pushad|pushfd|scasd|seta|setae|setb|setbe|setc|sete|setg|setge|setl|setle|setna|setnae|setnb|setnbe|setnc|setne|setng|setnge|setnl|setnle|setno|setnp|setns|setnz|seto|setp|setpe|setpo|sets|setz|shld|shrd|stosb|stosw|xlatb)", 
            "name": "support.class.80386", 
            "comment": "Function 80386 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.80386"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:arpl|clts|lar|lgdt|lidt|lldt|lmsw|loadall|lsl|ltr|sgdt|sidt|sldt|smsw|str|verr|verw|xlat)\\s", 
            "name": "support.class.80286", 
            "comment": "Function 80286 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.80286"
                }
            }
        }, 
        {
            "match": "^\\s*(?i:bound|enter|ins|leave|outs|popa|pusha)\\s", 
            "name": "support.class.80186/80188", 
            "comment": "Function 80186/80188 case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.80186/80188"
                }
            }
        },
        {
            "name": "support.class.8086/8088", 
            "comment": "Function 8086/8088 case insensitive", 
            "match": "^\\s*(?i:aaa|aad|aam|aas|adc|add|and|call|cbw|clc|cld|cli|cmc|cmp|cmpsb|cmpsw|cwd|daa|das|dec|div|esc|hlt|idiv|imul|in|inc|int|into|iret|ja|jae|jb|jbe|jc|jcxz|je|jg|jge|jl|jle|jna|jnae|jnb|jnbe|jnc|jne|jng|jnge|jnl|jnle|jno|jnp|jns|jnz|jo|jp|jpe|jpo|js|jz|jmp|lahf|lar|lds|lea|les|lock|lodsb|lodsw|loop|loope|loopz|loopnz|loopne|mov|movsb|movsw|mul|neg|nop|not|or|out|pop|popf|push|pushf|rcl|rcr|rep|repe|repne|repnz|repz|ret|retn|retf|rol|ror|sahf|sal|sar|sbb|scasb|scasw|shl|shr|stc|std|sti|stosb|stosw|sub|test|wait|xchg|xlat|xor)\\s", 
            "captures": {
                "1": {
                    "name": "support.class.8086/8088"
                }
            }
        },
        {
            "match": "^\\s*(?i:f2xm1|fabs|fadd|faddp|fbld|fbstp|fchs|fclex|fcom|fcomp|fcompp|fdecstp|fdisi|fdiv|fdivp|fdivr|fdivrp|feni|ffree|fiadd|ficom|ficomp|fidiv|fidivr|fild|fimul|fincstp|finit|fist|fistp|fisub|fisubr|fld|fld1|fldcw|fldenv|fldenvw|fldl2e|fldl2t|fldlg2|fldln2|fldpi|fldz|fmul|fmulp|fnclex|fndisi|fneni|fninit|fnop|fnsave|fnsavew|fnstcw|fnstenv|fnstenvw|fnstsw|fpatan|fprem|fptan|frndint|frstor|frstorw|fsave|fsavew|fscale|fsqrt|fst|fstcw|fstenv|fstenvw|fstp|fstsw|fsub|fsubp|fsubr|fsubrp|ftst|fwait|fxam|fxch|fxtract|fyl2x|fyl2xp1|fsetpm|fcos|fldenvd|fnsaved|fnstenvd|fprem1|frstord|fsaved|fsin|fsincos|fstenvd|fucom|fucomp|fucompp|fcomi|fcomip|fucomi|fucomip|ffreep|fcmovb|fcmove|fcmovbe|fcmovu|fcmovnb|fcmovne|fcmovnbe|fcmovnu)\\s", 
            "name": "support.class.fpu", 
            "comment": "Function fpu case insensitive", 
            "captures": {
                "1": {
                    "name": "support.class.fpu"
                }
            }
        },

        {
            "match": "\\b(?i:al|ah|ax|eax|rax|bl|bh|bx|ebx|rbx|cl|ch|cx|ecx|rcx|dl|dh|dx|edx|rdx|sil|si|esi|rsi|di|di|edi|rdi|bpl|bp|ebp|rbp|sp|esp|rsp|cs|ds|ss|es|fs|gs|ip|eip|rip|flags|eflags|rflags|r8|r9|r10|r11|r12|r13|r14|r15|r8d|r9d|r10d|r11d|r12d|r13d|r14d|r15d|r8w|r9w|r10w|r11w|r12w|r13w|r14w|r15w|r8l|r9l|r10l|r11l|r12l|r13l|r14l|r15l|st0|st1|st2|st3|st4|st5|st6|st7|mm0|mm1|mm2|mm3|mm4|mm5|mm6|mm7|xmm0|xmm1|xmm2|xmm3|xmm4|xmm5|xmm6|xmm7|xmm8|xmm9|xmm10|xmm11|xmm12|xmm13|xmm14|xmm15|xmm16|xmm17|xmm18|xmm19|xmm20|xmm21|xmm22|xmm23|xmm24|xmm25|xmm26|xmm27|xmm28|xmm29|xmm30|xmm31|ymm0|ymm1|ymm2|ymm3|ymm4|ymm5|ymm6|ymm7|ymm8|ymm9|ymm10|ymm11|ymm12|ymm13|ymm14|ymm15|ymm16|ymm17|ymm18|ymm19|ymm20|ymm21|ymm22|ymm23|ymm24|ymm25|ymm26|ymm27|ymm28|ymm29|ymm30|ymm31|zmm0|zmm1|zmm2|zmm3|zmm4|zmm5|zmm6|zmm7|zmm8|zmm9|zmm10|zmm11|zmm12|zmm13|zmm14|zmm15|zmm16|zmm17|zmm18|zmm19|zmm20|zmm21|zmm22|zmm23|zmm24|zmm25|zmm26|zmm27|zmm28|zmm29|zmm30|zmm31|cr0|cr2|cr3|cr4|gdtr|ldtr|idtr|dr0|dr1|dr2|dr3|dr4|dr5|dr6|dr7|msr)\\b", 
            "name": "entity.name.function.reg", 
            "comment": "Names registers case insensitive", 
            "captures": {
                "1": {
                    "name": "entity.name.function.reg"
                }
            }
        }
	]
}